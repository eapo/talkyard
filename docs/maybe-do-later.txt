In this file: Features and fixes to maybe implement in the future.
Each issue starts with a "code tag", e.g.:  [subcats]
which you can search for across the whole code base, to find some-of / all-of
the relevant source code places to change.


Instead of this file, maybe use a combination of:
 - https://github.com/dspinellis/git-issue   wow! and source code with  {{ {1  vi folds
 (- https://git-scm.com/docs/git-notes? )
 (- https://github.com/google/git-appraise )

[ty_themes]
Primary button colors, secondary, background, arrows, fonts,
and embedded widgets, e.g. Twitter's oEmbed has a 'link_color: #223344' attr,
                            and  theme=light/dark.

[staff_can_see]
Add a black hanglock next to things one can see, because of one's extra
access permissions? E.g. editing category settings, or backlinks from
access restricted topics.


[immutable]
Make all js objs "light weight immutable", via Typescript's 'readonly' properties:
https://www.typescriptlang.org/docs/handbook/interfaces.html#readonly-properties
(React wants immutable.)

[subcats]
Implement sub categories.

[sw] [sse]
Service worker. Server sent events.

[offline-first]
Things to think about, if making Ty work offline.

[spam]
When deleting a post, ask if it's because it's spam. If yes, and the post
hasn't been spam checked — send it to the spam check services so they'll
get more training data. [DELSPAM] (Currently, only if the post has already
been spam checked, will it get sent back to the spam check service,
if there was a classification error.)

If many posts by a new user are classified as spam. Or if staff deletes most of hens
posts, during review. Then mark user as a moderate threat. [DETCTTHRT]

FIXED, now uses 1st party cookie or storage: [privacy-badger]:
Privacy Badger doesn't like transient session cookies, currently.
(See https://github.com/EFForg/privacybadger/issues/2003#issuecomment-391745819  bullet point 3. )
So maybe change from csrf Double Submit Cookie, to Encrypted Token Pattern?
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Encrypted_Token_Patternp

[pps]
Rename User to Participant and User to Member.  Participant = Guest or Member, Member = User or Group.
Rename variables named like "member" to "user", "memberOrGroup" to "member", "user" to "participant"
Rename "indie" to user" and "people" to "members"

[security]
prevent usernames from being displayed in Unicode, if mixed charsets used,
e.g. Latin + Cryllic = facebooĸ.com  (homograph attacks).

[more_runtime_assertions]
Figure out a way to safely add more runtime assertions — although sometimes
I'll add *incorrect assertions* some of which will *break* and need to
be disabled.

[authn]
What about adding U2F login?
https://github.com/Yubico/java-webauthn-server/ — a Java U2F / WebAuthn lib.

[no-email]:
Let people create accounts without specifying any email address. Like at Reddit.


[reenable-akismet]:
For some reason I disabled Akismet (why? when refactoring to save time?). Enable it again.


[undel_posts]:
Undelete posts, not just pages and categories.
And make it possible to change from  Rejected —> Approved,
and Approved —> Rejected,  unless got replies or Like votes already?

[flat-comments]:
Change layout of problem type topics to traditional forum flat comments layout.
& use for formal messages too, or maybe repl w chat?

[editor-drafts]:
When starting a new topic, or editing a post, ask "Continue editing draft? [Yes, resume draft] [No, ignore draft (but keep it)]"
instead of always opening the old draft. Because otherwise sometimes old edits I didn't want, reappears.
How do that, UX wise? Maybe ask, when *opening* instead of when *saving*? and always
save a draft by default? Because maybe short of time when saving (e.g. need to run and
catch the subway, happens to me all the time) then it's annoying with questions.

[relfollow]:
Add a 'rel=follow links to domains: ...' config value,
so peope can follow links to their own domains.
Domains where rel=nofollow should not be added to links.
Will be applied to sub domains too, e.g. if you type `ex.com`, `sub.ex.com` will also
have rel=nofollow removed.
You should add the address of this forum, and your main website (if any),
so search engines like Google, Bing, Yandex, Baidu will find all content.


[rand-page-id], [rand-user-id]:
Let outwardly visible page and user ids, be random numbers, to prevent
discovery of pages & people by iterating through all ids in the url.
64 bit random ids? or 32 bits + stricter rate limiting?

[custom-groups]
Search for that tag.

[subcomms]
Improve sub communities, e.g. selecting a category across all sub communities,
not only the current one.

[performance]
Performance tests:
 "Capture a timeline trace of your site to help diagnose performance issues."
 https://github.com/GoogleChrome/puppeteer

Test on real life anonymized data:  PostgreSQL Anonymizer?
   https://www.postgresql.org/about/news/2017

[table_partitions]
{{{2 Shard tables by site_id_c?
Needs pg11 (not pg10): In pg11, a parent table index gets auto-created on child tables
(both child tables that already existed, or get created after the index).
What happens when partitions created and there's data already?
Ans:
  > It is not possible to turn a regular table into a partitioned table or vice versa
  https://www.postgresql.org/docs/current/ddl-partitioning.html
Ok, so partitioning means renaming the tables, and creating new, w partitions,
then copying the old data?
(Not needed in Ty's case, but pg11 supports updating rows and auto-moving
to the correct partition.)
Actually, needs pg12: foreign keys fully compatible with partitioned tables:
    can have partitioned table on either side of a foreign key constraint.
    (Ty's case: always both sides.)
    > for the first time it is possible in PostgreSQL to maintain large volumes
    > of data while maintaining referential integrity
    https://www.2ndquadrant.com/en/blog/postgresql-12-foreign-keys-and-partitioned-tables/
    pg11: enable_partitionwise_aggregate
Nice way to quickly delete a whole site: Just drop the whole partitioned tables.
  > very quickly delete millions of records because it doesn't have to individually delete every record

Pg12 has good partition pruning: at ~ 8k partitions, speed is ~90% of w just 1 table, and ~100% up to
about 2k partitions. https://www.2ndquadrant.com/en/blog/postgresql-12-partitioning/

Or, cluster tables — but:
  > when the table is subsequently updated, the changes are not clustered
  https://www.postgresql.org/docs/12/sql-cluster.html
  One can periodically recluster — but that requries an exclusive lock!
  However, clustering posts3 / posts_t by page_id_c = good idea.
}}}2

[onesocket]
Subscribe to live-updates via a "shared web worker" so each browser gets its own connection,
rather than each browser tab.  See e.g.:
https://stackoverflow.com/questions/9554896/sharing-websocket-across-browser-tabs
websearch for e.g. "chrome all tabs share websocket"


[canonical-username]
[CANONUN] [5WKB23Z]
Rename theUsername to exactUsername? — it'll be how the username is displayed,
e.g. `jane_doe` or `jane.doe`, and always possible to login with that exact username.
Add canonicalUsername, which is: lowercase, and /[._-]+/ changed to '_'
so there's nothing but: [a-z0-9_]+ left.
By default, one can type whatever [_.-] when logging in, and it'll be first checked against
the exact username, and then [_.-]+ changed to '_' and compared with the canonical username.
And won't be able to create new accounts that have the same canonical useranme, as an already existing.
So logging in as Jane Doe works with: 'jane.doe', 'jane-doe', 'jane_doe'. And also for mentions,
so all these work: `@jane.doe @jane-doe @jane_doe` — it'll be the same person.
However, `jan.edoe` is someone else. That canonical username is different ('_' in a different place).

[username-starts-with-_] ?
https://github.com/discourse/discourse/commit/262f561a877e0296d7ca7f6ec9f27edd0d30ca8e
https://github.com/discourse/discourse/commit/90351348ec3c0b1872aa680c0c9ddd5271e3740b
https://meta.discourse.org/t/usernames-with-periods-are-changed-to-underscore/17168/8  . –> _


[canonical-email]
Avoid accidentally splitting an account into two, because sometimes '.' sometimes no '.'
when logging in with Gmail. Also, @gmail.com and @googlemail.com are the same.
https://support.google.com/mail/answer/10313?hl=en
Real life example of this happening:
https://meta.discourse.org/t/discourse-creates-new-users-if-dots-are-present-absent-in-google-email-address-when-logging-in-using-google/66151
Good approach?: https://stackoverflow.com/a/51344711/694469

Add canonical email? [canonical-email] So  dotty.addr.ess@googlemail also
saved as  dottyaddress@gmail.com, and if logs in with or without dots,
we'll know it's the same person? However, if types  some.name+tags@gmail.com,
then one *intentionally* added +something, and then treat as separate addr?
so can create different accounts for testing. (Spam detection could just
be aware that x+something and x+something2 and x+... are all the same accounts.)
If not, then sometimes people sign up manually, say, without dots. And then,
later, the community adds Gmail OpenAuth, and the same person signs in
with Google, and Google sends the addr via OpenAuth *with* dots, and this would
result in two different accounts for the same person, and confusion ("Where are
all my old posts?").

[one-db-writer]
Prevent all PostgreSQL serialization errors, by doing all writes from a single actor, and
use message passing & async replies?


[change-author]
Make it possible to change the author of a post to someone else. Or change edited-by to another user id.

[assign-posts]
Assign topics and posts to people.
Why assign a post? Because someone might ask a good question, in a longer discussion, and nice
to know & remember who will try to answer it, later.

[whispers]
(Much later. Not within -18.)
Inspired by Discourse. Read a bit more about how they do it.
Add whisper_to_user_id  post3 column. Default is to staff.
Already added:  drafts3.reply_whisper_to_user_id  column.
Trusted members? (full memers?) can whisper to any group (or person?) not only to staff.
  E.g. whisper to a group of category moderators for dealing with issues in that category.
Or a staff member whispers to the question asker, in a support topic: the staff asks for tech
  details; then the maybe new-member can reply, and no one else sees hens tech details.
  (The UX would need to make it very clear that no one but staff can see the reply.)
Staff always see all whispers.
All whisper post nrs have negative ids? And are never incld when rendering & caching a page.
Only loaded lazily when the current user happen to be some kind of staff (e.g. global mod,
or spceific category moderator) or for some reason may see the whisper.
Do not add any special post type, for whispers. The whisper_to_user_id field is enough? If adds, then, always show reply-to-op whispers as Progr type message?
A whole topic cannot be a whisper. Instead, group direct-message the staff, or category mods.
Don't bump page if whisper post. Do send notfs to receivers though (e.g. staff members).
A user's first few whispers to non-staff: Maybe should never be shown, until reviewed by staff. High risk for weird messages?


[tiny-dialog]
Find (or create?) a tiny modal dialog React class that can be included in slim-bundle.js,
so can open error dialog also if couldn't load more-bundle.js from the server.
Or cache more-bundle.js: PWA and service worker.


[manydrafts]
If there're many drafts for the same thing, show them in a list and let the user choose which
one to continue editing. (Rather than just picking a random one.)


[imp-groups]
Make it possible to impersonate groups. Nice for testing one's access control settings.
Currently disallowed, though, because haven't had time to verify doing things as a group,
wouldn't result in unexpected weird things. And who should be notified about replies to
a test comment made when impersonating a group?
(Everyone in the group? No, they'd get annoyed. Only the group then?)

[grp-mbr-title]
Show a title, like "Team" or "Support" or "Volunteer" or "Students 2019",
depending on which custom group one is in.  Need clear caches after?
That is, both: emptyCacheImpl(tx)  and  memCache.clearSingleSite(siteId).

[group-feats]
Add group visibility settings. And who-may-join feautre, and Join/Leave group buttons.
+ other features, look at Discourse.
Don't let one self-join groups that grants a trust level higher than one's current level.

[message-managers]
A way to message only the managers in a group, rather than everyone in the group?
Maybe `@managers@group_name` ?

[req-memship]
Add a Request [group] Membership button (for groups that are visible, and that one may
not self-join). Group Managers and Adders then get notified
(Discourse: the 5 most recently active "group owners") — or, if there are none,
then the site staff get notified. Also, if the group managers don't handle the request
within X days, then the site staff get notified? (Passive group managers = not good.)

[lazy-upd-link-origins]
If moves CDN to a different address, or moves Talkyard server to a new address,
then, lazily regenerate html with the correct addresses, for links to uploaded
images etc.

[blog_comments_sso]
Use PASTEO https://news.ycombinator.com/item?id=17877332
 http://cryto.net/~joepie91/blog/2016/06/13/stop-using-jwt-fo...
 http://cryto.net/%7Ejoepie91/blog/2016/06/19/stop-using-jwt-...
 https://paragonie.com/blog/2017/03/jwt-json-web-tokens-is-ba...
 https://paseto.io
Wow this is nice!:
     local: shared-key authenticated encryption
     Local tokens are encrypted
     https://github.com/atholbro/paseto#local-and-public
(Determinsistic json stringify: https://www.npmjs.com/package/fast-stable-stringify )

[serversid]
Server side sesison ids, maybe in Redis? So can log ppl out, without having access
to their browsers to delete session cookies.

[weaksid]

SECURITY Use HMAC. Not SHAX. Need not fix urgently. Prevents extension attacks

SECURITY Use Distroless? https://github.com/GoogleContainerTools/distroless instead of Alpine?
Slightly less attack surface, and slightly faster: glibc instead of musl.
https://news.ycombinator.com/item?id=19862002

SECURITY: https://news.ycombinator.com/item?id=19856419 "HTTP headers for the responsible developer"
https://developer.mozilla.org/en-US/docs/Web/Security/Subresource_Integrity

SECURITY tests: https://github.com/beefproject/beef  ?
Also see:   [sec_tst_rscs] in sanitize-posts.2browsers.test.ts.


[emb_login_req]
Make  login-required work also for embeded comments.

[emb_forum]
Make it possible to embedd a forum, or fourm cateory (no just blog comments).

[ty_oemb_og]
Add oEmbed & OpenGraph support to Ty.
See e.g.:
  https://wordpress.org/plugins/wpsso/
  https://blog.ycombinator.com/how-to-build-an-oembed-integration-for-your-startup-and-why-its-necessary/
And OpenGraph:
  https://wordpress.org/support/topic/social-sharing-on-linkedin-description-not-appearing/
LinkedIn likes oEmbed better than OpenGraph:
  https://surniaulula.com/2019/standards/og/linkedin-prefers-oembed-data-instead-of-open-graph/
(Commercial:  https://embed.ly  +  https://iframely.com,
iframely = OSS too:  https://github.com/itteco/iframely/tree/master/plugins/domains )

[like-notfs]  [like_vote_notfs]
Send notifications about getting a Like.

[refactor-notfs]  DONE, except for re-enabling reconnect.
Remove Nchan. Use Rust + server-sent-events instead.  NO, just Play and WebSocket now.

[notf_schedule][snooze_schedule]
Individual prefs:
  Configure when auto-snoozing — e.g. weekends and before & after 0900-1700.
  Get someone's-waiting-for-approval notfs, if been waiting for > X hours.
  Or optionally if new member joins.

[external-server-js]
What? Same as [ext_markup_processor] ?

[ext_markup_processor]
Convert commonmark to html in external process / server, not in the JVM.
Works ok in the JVM, however, if importing a large site with thousands of posts to
process, that'd almost be a self-DoS. Better delegate to other server.

[rich-text-editor]
Later, support not only CommonMark but also rich text wysiwyg.
Then first need to fix: [DRAFTPRVW] ?

[html_json] [nashorn_in_tx] [save_post_lns_mentions]
Keep sanitized html in a json array with placeholders for site origin,
page titles (internal links), usernames, so the html can be reconstructed
"instantly" if the site origin changes, pages renamed, username changed.
And for different display resolutions — without having to re-render
CommonMark to html (which can be a bit slow).

[nashorn_in_tx]  COULD_OPTIMIZE
Do outside tx.

[double_tx]  COULD_OPTIMIZE
Read-only tx in tx is ok but unnecessary, a tiny bit slower & more mem.

COULD_OPTIMIZE
https://web.dev/content-visibility/
https://developer.mozilla.org/en-US/docs/Web/CSS/contain


[macro-bug]
Find a better macro lib that won't "destroy" the file if @endif is on the line just above '}'.
Use the C preprocessor? Didn't find anything else that does what I'm looking for.

[devfriendly]
Maybe make all endpoints that accept, say, only POST, reply and tell other method
type invocations that they should use POST? Would need to change Play Fmw for this.

[React_Router_v51]
Migrate unnecessary Route({ ... render: ({ match }) => ...) to hooks:
https://reacttraining.com/blog/react-router-v5-1/
But rename useParams to useUrlParams !?


[bot_api]  [plugin]
Nice API for writing bots, e.g. chat bots or a Usability Testing Exchange external
server / bot.


[extensions] [themes]
Needs new table: t_extensions

Wow! Stylus <3  This:
    $uiHue = _subst_uiHue;
    $uiColor = _subst_hsl($uiHue 80% 50%);
    $uiColorAlt2 = _subst_hsl(_subst_uiHue2 70% 40%);
    body
      color: $uiColor;
      foo: 5px + 10
      foo: 2 ** 8
    div
      color: $uiColor;
      color: $uiColorAlt2;
      border: 1px solid $uiColor;
 —> this:
    body {
      color: _subst_hsl(_subst_uiHue 80% 50%);
      foo: 15px;
      foo: 256;
    }
    div {
      color: _subst_hsl(_subst_uiHue 80% 50%);
      color: _subst_hsl(_subst_uiHue2 70% 40%);
      border: 1px solid _subst_hsl(_subst_uiHue 80% 50%);
    }
  see:  https://stylus-lang.com/try.html#?code=%24uiHue%20%3D%20_subst_uiHue%3B%0A%24uiColor%20%3D%20_subst_hsl(%24uiHue%2080%25%2050%25)%3B%0A%0A%24uiColorAlt2%20%3D%20_subst_hsl(_subst_uiHue2%2070%25%2040%25)%3B%0A%0Abody%0A%20%20color%3A%20%24uiColor%3B%0A%20%20foo%3A%205px%20%2B%2010%0A%20%20foo%3A%202%20**%208%0A%0Adiv%0A%20%20color%3A%20%24uiColor%3B%0A%20%20color%3A%20%24uiColorAlt2%3B%0A%20%20border%3A%201px%20solid%20%24uiColor%3B
Then just Scala repl-all-literally, w custom colors & fonts ets, & @media (min-width: ...).


[site_conf_vals]
Generate target=_blank noopener links?
Generate https://host/page/path links, or /page/path links,  for in site rel links?


[nashorn_in_tx]  COULD_OPTIMIZE
Do outside tx.


[double_tx]  COULD_OPTIMIZE
Read-only tx in tx is ok but unnecessary, a tiny bit slower & more mem.


[Scala_213]
Try —> Using

[site_statistics]
ex data to incl: https://docs.mattermost.com/administration/statistics.html
   https://github.com/mattermost/mattermost-server/blob/master/app/analytics.go
     &  https://meta.discourse.org/u?period=weekly
   + stats:
      https://docs.mattermost.com/deployment/metrics.html#statistics
  ~= GitHub Contributors stats would be nice, per user / group?
   + stats per tag(s) / categories / users / groups.
       to see how a department or team (group) or type of topics
       (tags or category) is doing.
   Median and 90, 99 percentil response time? and Done [x] or Answered (v) time?
   Maybe as a function of when during the day, and on which day, topic posted?
   Both first reply response time (first reply to the Orig Post)
     and Followup replies response time, for replying to replies (until topic closed / done).
If wants very detailed: https://www.timescale.com?  PipelineDB?  Prometheus?
but then as a separate pg instance?
So a full dump of the actual site won't take forever because terrabytes time series data.
And cannot be 100% there are no bugs causing problems when running DDL data-def-lang migrations?
   "PostgreSQL instance was unrecoverably corrupted after the virtual machine running it was powered off"  https://dev.t-matix.com/blog/postgresql-as-a-time-series-database/
https://news.ycombinator.com/item?id=20760324
TimescaleDB = pg extentsion, nice, no need to learn a completely new db & storage type.

[typesafe_lua]
Maybe: https://github.com/teal-language/tl  Teal, a typed dialect of Lua  ?
  by https://github.com/hishamhm  works at Kong. FOSDEM2020, VSCode & Vim support.
https://github.com/emilk/sol — no longer in active development

[content_filter]
E.g. disallow toxic speech, or pics of zebras if that's against the community's rules.

[blake3]  COULD_OPTIMIZE
Blake3 is ~ 10x faster than SHA2:
  https://news.ycombinator.com/item?id=22021769
  https://news.ycombinator.com/item?id=22003315
Wait until there's a well tested Java lib available?
Then use Blake3 instead e.g. to hash long Redis keys (and just delete the old
cached things, it's a cache).

[rebuild_reindex_posts]
A background job that regenerates html (CommonMark –> html) and
renindexes all posts (or all posts in a category / tag / by certain participants).
It finds all links/backlinks, upload refs, ext link preview links,
changes any  embeddedOriginOrEmpty links,  and any url subfolder installation path,
& full text search reindexes,
Without! any long running db transactions. 1) loads the data it needs, in a read-only tx.
Then, compiles Commonmark to html, finds all links etc.
Then, a read-write-tx: If the post wasn't changed since the r/o tx, then
save the rebuilt post.
